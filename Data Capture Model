#ROS2-Humble: Data Publisher

#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
import carla
import math
import json
import os

class DataPublisher(Node):
    def __init__(self):
        super().__init__('data_publisher')
        self.get_logger().info('Initializing Data Publisher...')

        # Connect to CARLA server
        self.client = carla.Client('localhost', 2000)
        self.client.set_timeout(10.0)
        self.world = self.client.get_world()

        blueprint_library = self.world.get_blueprint_library()
        self.vehicle = None

        for actor in self.world.get_actors():
            if 'vehicle' in actor.type_id:
                self.vehicle = actor
                break

        if self.vehicle is None:
            self.get_logger().error("No vehicle found in simulation!")
            return
        else:
            self.get_logger().info(f"Connected to vehicle: {self.vehicle.type_id}")

        self.map = self.world.get_map()

        # JSON logging
        self.data_log = []
        self.json_file_path = os.path.expanduser('~/Documents/carla_data_log.json')

        # Timer to call publisher_callback at 20 Hz
        self.create_timer(0.05, self.publisher_callback)

    def publisher_callback(self):
        try:
            # Get vehicle transform and steering
            transform = self.vehicle.get_transform()
            location = transform.location
            vehicle_pos = (location.x, location.y)

            control = self.vehicle.get_control()
            steering_angle = control.steer  # -1.0 (full left) to +1.0 (full right)

            # Get lane center waypoint
            waypoint = self.map.get_waypoint(location, project_to_road=True)
            lane_pos = waypoint.transform.location
            lane_center = (lane_pos.x, lane_pos.y)

            # Calculate lateral offset
            dx = vehicle_pos[0] - lane_center[0]
            dy = vehicle_pos[1] - lane_center[1]
            lateral_offset = math.sqrt(dx**2 + dy**2)

            # Determine side and apply sign
            if dx < -0.1:
                lateral_offset *= -1
                direction = 'left'
            elif dx > 0.1:
                direction = 'right'
            else:
                lateral_offset = 0.0
                direction = 'center'

            # Create log entry
            log_entry = {
                'steering_angle': round(steering_angle, 3),
                'lateral_offset_m': round(lateral_offset, 3),
                'direction': direction
            }

            self.get_logger().info(str(log_entry))
            self.data_log.append(log_entry)

            # Save every 10 entries
            if len(self.data_log) % 10 == 0:
                with open(self.json_file_path, 'w') as f:
                    json.dump(self.data_log, f, indent=2)

        except Exception as e:
            self.get_logger().error(f"Error: {e}")

def main(args=None):
    rclpy.init(args=args)
    node = DataPublisher()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
